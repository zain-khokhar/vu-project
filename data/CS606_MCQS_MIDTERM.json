[
  {
    "id": 1,
    "question": "LR parsers can handle ________________ grammars.",
    "options": [
      "Left-recursive",
      "file-recursive",
      "End-recursive",
      "Start-recursive"
    ],
    "correct": "Left-recursive",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 5
  },
  {
    "id": 2,
    "question": "_____ convert the reloadable machine code into absolute machine code by linking library and reloadable object files.",
    "options": [
      "Assembler",
      "Loader/link-editor",
      "Compiler",
      "Preprocessor"
    ],
    "correct": "Loader/link-editor",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 2
  },
  {
    "id": 3,
    "question": "Consider the grammar A --> B C D\nB --> h B | epsilon\nC --> C g | g | C h | i\nD --> A B | epsilon\nFollow of B is _____________ .",
    "options": [
      "h",
      "g, h, i, $",
      "g, i",
      "g"
    ],
    "correct": "g, i",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 4
  },
  {
    "id": 4,
    "question": "Consider the grammar A --> B C D\nB --> h B | epsilon\nC --> C g | g | C h | i\nD --> A B | epsilon\nFollow of C is _____________ .",
    "options": [
      "g, h, i, $",
      "g, h, $",
      "h, i, $",
      "h, g, $"
    ],
    "correct": "h, i, $",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 1
  },
  {
    "id": 5,
    "question": "An important component of semantic analysis is __________________ .",
    "options": [
      "code checking",
      "type checking",
      "flush checking",
      "None of the given"
    ],
    "correct": "type checking",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 4
  },
  {
    "id": 6,
    "question": "In PASCAL ___________ represent the inequality test.",
    "options": [
      ":=",
      "=",
      "<>",
      "None of the given"
    ],
    "correct": "<>",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 4
  },
  {
    "id": 7,
    "question": "Lexical Analyzer generator ________________ is written in Java.",
    "options": [
      "Flex",
      "Jlex",
      "Complex",
      "None of given"
    ],
    "correct": "Jlex",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 1
  },
  {
    "id": 8,
    "question": "____________avoid hardware stalls and interlocks.",
    "options": [
      "Register allocation",
      "Instruction scheduling",
      "Instruction selection",
      "None of given"
    ],
    "correct": "Instruction scheduling",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 3
  },
  {
    "id": 9,
    "question": "Consider the following grammar,\nA --> B C D\nB --> h B | episilon\nC --> C g | g | C h | i\nD --> A B | episilon\nFirst of A is _______________ .",
    "options": [
      "h, g, i",
      "g",
      "h",
      "None of the given"
    ],
    "correct": "h, g, i",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 3
  },
  {
    "id": 10,
    "question": "Recursive ____________ parsing is done for LL(1) grammar.",
    "options": [
      "Decent",
      "Ascent",
      "Forward",
      "Backward"
    ],
    "correct": "Decent",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 2
  },
  {
    "id": 11,
    "question": "One of the core tasks of compiler is to generate fast and compact executable code.",
    "options": [
      "True",
      "False"
    ],
    "correct": "True",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 2
  },
  {
    "id": 12,
    "question": "Left factoring of a grammar is done to save the parser from back tracking.",
    "options": [
      "True",
      "False"
    ],
    "correct": "True",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 1
  },
  {
    "id": 13,
    "question": "Responsibility of ______________ is to produce fast and compact code.",
    "options": [
      "Instruction selection",
      "Register allocation",
      "Instruction scheduling",
      "None of given"
    ],
    "correct": "Instruction selection",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 3
  },
  {
    "id": 14,
    "question": "________________ algorithm is used in DFA minimization.",
    "options": [
      "James’s",
      "Robert’s",
      "Hopcroft’s",
      "None of given"
    ],
    "correct": "Hopcroft’s",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 3
  },
  {
    "id": 15,
    "question": "Compilers are sometimes classified as.",
    "options": [
      "Single pass",
      "Multi pass",
      "Load and go",
      "All of the given"
    ],
    "correct": "All of the given",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 4
  },
  {
    "id": 16,
    "question": "In multi pass compiler during the first pass it gathers information about ___________________ .",
    "options": [
      "Declaration",
      "Bindings",
      "Static information",
      "None of the given"
    ],
    "correct": "Static information",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 3
  },
  {
    "id": 17,
    "question": "Flex is an automated tool that is used to get the minimized DFA (scanner).",
    "options": [
      "True",
      "False"
    ],
    "correct": "True",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 4
  },
  {
    "id": 18,
    "question": "In compilation process Hierarchical analysis is also called",
    "options": [
      "Parsing",
      "Syntax analysis",
      "Both Parsing and Syntax analysis",
      "None of given"
    ],
    "correct": "Both Parsing and Syntax analysis",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 4
  },
  {
    "id": 19,
    "question": "For each language to make LL(1) grammar, we take two steps, 1st is removing left recurrence and 2nd is applying fin sequence.",
    "options": [
      "True",
      "False"
    ],
    "correct": "False",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 4
  },
  {
    "id": 20,
    "question": "_____________is evaluated to yield a value.",
    "options": [
      "Command",
      "Expression",
      "Declaration",
      "Declaration and Command"
    ],
    "correct": "Expression",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 1
  },
  {
    "id": 21,
    "question": "LR parsers can handle ________________ grammars.",
    "options": [
      "Left-recursive",
      "file-recursive",
      "End-recursive",
      "Start-recursive"
    ],
    "correct": "Left-recursive",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 1
  },
  {
    "id": 22,
    "question": "Optimal registers allocation is an NP-hard problem.",
    "options": [
      "True",
      "False"
    ],
    "correct": "True",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 4
  },
  {
    "id": 23,
    "question": "Parser takes tokens from scanner and tries to generate _______________ .",
    "options": [
      "Binary Search tree",
      "Parse tree",
      "Syntax trace",
      "None of the given"
    ],
    "correct": "Parse tree",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 2
  },
  {
    "id": 24,
    "question": "Front end of two pass compiler takes_________________ as input.",
    "options": [
      "Source code",
      "Intermediate Representation (IR)",
      "Machine Code",
      "None of the Given"
    ],
    "correct": "Source code",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 3
  },
  {
    "id": 25,
    "question": "In DFA minimization we construct one _______________ for each group of states from the initial DFA.",
    "options": [
      "State",
      "NFA",
      "PDA",
      "None of given"
    ],
    "correct": "State",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 1
  },
  {
    "id": 26,
    "question": "In Three-pass compiler _____________ is used for code improvement or optimization.",
    "options": [
      "Front End",
      "Middle End",
      "Back End",
      "Both Front end and Back end"
    ],
    "correct": "Middle End",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 2
  },
  {
    "id": 27,
    "question": "________________ of a two-pass compiler is consists of Instruction selection, Register allocation and Instruction scheduling.",
    "options": [
      "Back end",
      "Front end",
      "Start",
      "None of given"
    ],
    "correct": "Back end",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 1
  },
  {
    "id": 28,
    "question": "NFA is easy to implement as compared to DFA.",
    "options": [
      "True",
      "False"
    ],
    "correct": "False",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 3
  },
  {
    "id": 29,
    "question": "We can get an LL(1) grammar by ________________ .",
    "options": [
      "Removing left recurrence",
      "Applying left factoring",
      "Removing left recurrence and Applying left factoring",
      "None of the given"
    ],
    "correct": "Removing left recurrence and Applying left factoring",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 2
  },
  {
    "id": 30,
    "question": "Parser always gives a tree like structure as output",
    "options": [
      "True",
      "False"
    ],
    "correct": "True",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 3
  },
  {
    "id": 31,
    "question": "Intermediate Representation (IR) stores the value of its operand in",
    "options": [
      "Registers",
      "Memory",
      "Hard disk",
      "Secondary storage"
    ],
    "correct": "Registers",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 5
  },
  {
    "id": 32,
    "question": "In Back End module of compiler, optimal register allocation uses_______________ .",
    "options": [
      "O(log n)",
      "O(n log n)",
      "N P-Complete",
      "None of the given"
    ],
    "correct": "N P-Complete",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 4
  },
  {
    "id": 33,
    "question": "Can a DFA simulate NFA?",
    "options": [
      "Yes",
      "No",
      "Sometimes",
      "Depend upon nfa"
    ],
    "correct": "Yes",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 2
  },
  {
    "id": 34,
    "question": "____________________ phase which supports macro substitution and conditional compilation.",
    "options": [
      "Semantic",
      "Syntax",
      "Preprocessing",
      "None"
    ],
    "correct": "Preprocessing",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 3
  },
  {
    "id": 35,
    "question": "Which of the statement is true about Regular Languages?",
    "options": [
      "Regular Languages are the most popular for specifying tokens.",
      "Regular Languages are based on simple and useful theory.",
      "Regular Languages are easy to understand.",
      "All of the given"
    ],
    "correct": "All of the given",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 5
  },
  {
    "id": 36,
    "question": "Lexer and scanner are two different phases of compiler",
    "options": [
      "True",
      "False"
    ],
    "correct": "False",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 2
  },
  {
    "id": 37,
    "question": "Lexical Analyzer generator ________________ is written in Java.",
    "options": [
      "Flex",
      "Jlex",
      "Complex",
      "None of the given"
    ],
    "correct": "Jlex",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 2
  },
  {
    "id": 38,
    "question": "In a transition table cells of the table contain the ________ state.",
    "options": [
      "Reject state",
      "Next state",
      "Previous state",
      "None of the given"
    ],
    "correct": "Next state",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 4
  },
  {
    "id": 39,
    "question": "The transition graph for an NFA that recognizes the language ( a | b)*abb will have following set of states.",
    "options": [
      "{0}",
      "{0,1}",
      "{0,1,2}",
      "{0,1,2,3}"
    ],
    "correct": "{0,1,2,3}",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 5
  },
  {
    "id": 40,
    "question": "Front end of two pass compiler takes_________________ as input.",
    "options": [
      "Source code",
      "Intermediate representation",
      "Machine code",
      "None"
    ],
    "correct": "Source code",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 2
  },
  {
    "id": 41,
    "question": "Functions of Lexical analyzer are?",
    "options": [
      "Removing white space",
      "Removing constants, identifiers and keywords",
      "Removing comments",
      "All of the given"
    ],
    "correct": "All of the given",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 5
  },
  {
    "id": 42,
    "question": "Front-end of a two pass compiler is consists of Scanner.",
    "options": [
      "True",
      "False"
    ],
    "correct": "True",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 4
  },
  {
    "id": 43,
    "question": "LL(1) parsing is called non-predictive parsing.",
    "options": [
      "True",
      "False"
    ],
    "correct": "False",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 2
  },
  {
    "id": 44,
    "question": "Recursive ______________ parsing is done for LL(1) grammar.",
    "options": [
      "Backward",
      "Forward",
      "Ascent",
      "Decent"
    ],
    "correct": "Decent",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 3
  },
  {
    "id": 45,
    "question": "In predictive parsing table the rows are ____________________ .",
    "options": [
      "Non-terminals",
      "Terminals",
      "Both non-terminal and terminals",
      "None of the given"
    ],
    "correct": "Non-terminals",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 1
  },
  {
    "id": 46,
    "question": "We can get an LL(1) grammar by ________________ .",
    "options": [
      "Removing left recurrence",
      "Applying left factoring",
      "Removing left recurrence and Applying left factoring",
      "None of the given"
    ],
    "correct": "Removing left recurrence and Applying left factoring",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 5
  },
  {
    "id": 47,
    "question": "________________ of a two-pass compiler is consists of Instruction selection, Register allocation and Instruction scheduling.",
    "options": [
      "Backend",
      "Frontend",
      "Start"
    ],
    "correct": "Backend",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 1
  },
  {
    "id": 48,
    "question": "Consider the grammar\nA --> B C D\nB --> h B | epsilon\nC --> C g | g | C h | i\nD --> A B | epsilon\nFirst of C is _______________ .",
    "options": [
      "g, i",
      "g",
      "h i",
      "i"
    ],
    "correct": "g, i",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 3
  },
  {
    "id": 49,
    "question": "Alternative of the backtrack in parser is Look ahead symbol in _______________ .",
    "options": [
      "input",
      "output",
      "input and output",
      "none"
    ],
    "correct": "input",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 4
  },
  {
    "id": 50,
    "question": "AST summarizes the grammatical structure with the details of derivations.",
    "options": [
      "True",
      "False"
    ],
    "correct": "False",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 2
  },
  {
    "id": 51,
    "question": "One of the core tasks of compiler is to generate fast and compact executable code.",
    "options": [
      "True",
      "False"
    ],
    "correct": "True",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 3
  },
  {
    "id": 52,
    "question": "Left factoring is enough to make LL1 grammar",
    "options": [
      "True",
      "False"
    ],
    "correct": "False",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 1
  },
  {
    "id": 53,
    "question": "In LL1() parsing algorithm _________ contains a sequence of grammar symbols.",
    "options": [
      "Stack",
      "Link list",
      "Array",
      "None"
    ],
    "correct": "Stack",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 2
  }
]