[
  {
    "id": 1,
    "question": "Which part of an object exhibits its state?",
    "options": [
      "Data",
      "Operations",
      "Any public part",
      "Any private part"
    ],
    "correct": "Data",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 4
  },
  {
    "id": 2,
    "question": "Inheritance is a way to",
    "options": [
      "organize data.",
      "pass arguments to objects of classes.",
      "add features to existing classes without rewriting them.",
      "improve data-hiding and encapsulation."
    ],
    "correct": "add features to existing classes without rewriting them.",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 4
  },
  {
    "id": 3,
    "question": "Suppose you have been given the following design, \"A person has a name, age, address and sex. You are designing a class to represent a type of person called a patient. This kind of person may be given a diagnosis, have a spouse and may be alive\". Given that the person class has already been created, what of the following would be appropriate to include when you design the patient class?",
    "options": [
      "registration date and diagnosis",
      "age and sex",
      "sex and diagnosis",
      "diagnosis and age"
    ],
    "correct": "registration date and diagnosis",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 4
  },
  {
    "id": 4,
    "question": "What problem(s) may occur when we copy objects without using deep copy constructor?",
    "options": [
      "Dangling pointer",
      "Memory Leakage",
      "All of the given",
      "System crash"
    ],
    "correct": "All of the given",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 1
  },
  {
    "id": 5,
    "question": "this pointers are not accessible for static member functions.",
    "options": [
      "True",
      "False"
    ],
    "correct": "True",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 3
  },
  {
    "id": 6,
    "question": "A static member function cannot be declared.",
    "options": [
      "Static",
      "Implicit",
      "Explicit",
      "Virtual"
    ],
    "correct": "Virtual",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 3
  },
  {
    "id": 7,
    "question": "_______ remain in memory even when all objects of a class have been destroyed.",
    "options": [
      "Static variables",
      "Instance variable",
      "Primitive variables",
      "None of given"
    ],
    "correct": "Static variables",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 2
  },
  {
    "id": 8,
    "question": "Friend functions are _____________ functions of a class.",
    "options": [
      "None of given",
      "object member",
      "non-member",
      "data member"
    ],
    "correct": "non-member",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 3
  },
  {
    "id": 9,
    "question": "___________, which means if A declares B as its friend it does NOT mean that A can access private data of B. It only means that B can access all data of A.",
    "options": [
      "Friendship is one way only",
      "Friendship is two way only",
      "NO Friendship between classes",
      "Any kind of friendship"
    ],
    "correct": "Friendship is one way only",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 1
  },
  {
    "id": 10,
    "question": "The statement objA=objB; will cause a compiler error if the objects are of different classes.",
    "options": [
      "True",
      "False"
    ],
    "correct": "False",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 1
  },
  {
    "id": 11,
    "question": "Identify which of the following overloaded operator function’s declaration is appropriate for the given call? Rational_number_1 + 2.325 Where Rational_number_1 is an object of user defined class Rational_number.",
    "options": [
      "Rational_number operator+( Rational_number & obj);",
      "Rational_number operator+(double& obj);",
      "Rational_number operator+(Rational_number &obj, double& num);",
      "operator+(double& obj);"
    ],
    "correct": "Rational_number operator+(double& obj);",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 5
  },
  {
    "id": 12,
    "question": "Which operator can not be overloaded?",
    "options": [
      "The relation operator ( >= )",
      "Assignment operator ( = )",
      "Script operator ( [] )",
      "Conditional operator (? : )"
    ],
    "correct": "Conditional operator (? : )",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 2
  },
  {
    "id": 13,
    "question": "To convert from a user-defined class to a basic type, you would most likely use",
    "options": [
      "a built-in conversion operator.",
      "a one-argument constructor.",
      "an overloaded = operator.",
      "a conversion operator that’s a member of the class."
    ],
    "correct": "a conversion operator that’s a member of the class.",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 5
  },
  {
    "id": 14,
    "question": "The technique in which we visualize our programming problems according to real life’s problems is called ----------------",
    "options": [
      "structured programming",
      "object oriented Programming",
      "procedural programming",
      "non of the given"
    ],
    "correct": "object oriented Programming",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 1
  },
  {
    "id": 15,
    "question": "In object orientated programming, a class of objects cans _____________ properties from another class of objects",
    "options": [
      "Utilize",
      "Borrow",
      "Inherit",
      "Adopt"
    ],
    "correct": "Inherit",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 5
  },
  {
    "id": 16,
    "question": "A C++ class is similar to --------------------",
    "options": [
      "Structure",
      "Header File",
      "Library File",
      "None of the given"
    ],
    "correct": "Structure",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 3
  },
  {
    "id": 17,
    "question": "What problem(s) may occur when we copy objects without using deep copy constructor?",
    "options": [
      "Dangling pointer",
      "Memory Leakage",
      "All of the given",
      "System crash"
    ],
    "correct": "All of the given",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 4
  },
  {
    "id": 18,
    "question": "Suppose that the Test class does not have an overloaded assignment operator. What happens when an assignment a=b; is given for two Test objects a and b?",
    "options": [
      "The automatic assignment operator is used",
      "The copy constructor is used",
      "Compiler error",
      "Run-time error"
    ],
    "correct": "The automatic assignment operator is used",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 5
  },
  {
    "id": 19,
    "question": "A static member function can be called, even when a class is not __________.",
    "options": [
      "Declared",
      "Define",
      "Instantiated",
      "Called"
    ],
    "correct": "Instantiated",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 3
  },
  {
    "id": 20,
    "question": "Identify which of the following overloaded operator function’s declaration is appropriate for the given call? Rational_number_1 + 2.325 Where Rational_number_1 is an object of user defined class Rational_number.",
    "options": [
      "Rational_number operator+( Rational_number & obj);",
      "Rational_number operator+(double& obj);",
      "Rational_number operator+(Rational_number &obj, double& num);",
      "operator+(double& obj);"
    ],
    "correct": "Rational_number operator+(double& obj);",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 2
  },
  {
    "id": 21,
    "question": "__________ provide the facility to access the data member.",
    "options": [
      "accesser function",
      "private function",
      "inline function",
      "None of the given"
    ],
    "correct": "accesser function",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 4
  },
  {
    "id": 22,
    "question": "Constant objects cannot change their state,",
    "options": [
      "True",
      "False"
    ],
    "correct": "True",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 4
  },
  {
    "id": 23,
    "question": "The ________ relationship indicates that an object contains other objects.",
    "options": [
      "None of given",
      "‘has-a’",
      "‘is-a’",
      "‘be"
    ],
    "correct": "‘has-a’",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 1
  },
  {
    "id": 24,
    "question": "Which one of the following features of OOP is used to derive a class from another?",
    "options": [
      "Encapsulation",
      "Polymorphism",
      "Data hiding",
      "Inheritance"
    ],
    "correct": "Inheritance",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 3
  },
  {
    "id": 25,
    "question": "_______ is a relationship",
    "options": [
      "Inheritance",
      "Polymarphism",
      "abstraction",
      "encapsulation"
    ],
    "correct": "Inheritance",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 3
  },
  {
    "id": 26,
    "question": "__________ satisfy the condition of polymorphism",
    "options": [
      "Carbon",
      "Diamond",
      "Coal",
      "all of the given"
    ],
    "correct": "all of the given",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 1
  },
  {
    "id": 27,
    "question": "A generalization-specialization relation between classes are implemented using",
    "options": [
      "data hiding",
      "friend classes",
      "encapsulation",
      "inheritance"
    ],
    "correct": "inheritance",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 5
  },
  {
    "id": 28,
    "question": "The >= operator can be overloaded.",
    "options": [
      "True",
      "False"
    ],
    "correct": "True",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 3
  },
  {
    "id": 29,
    "question": "In order to free the memory occupied by the object, we use -------------",
    "options": [
      "Constructor",
      "Destructor",
      "Shallow Copy",
      "Deep Copy"
    ],
    "correct": "Destructor",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 2
  },
  {
    "id": 30,
    "question": "Which of the following is not an example of multiple inheritances?----------",
    "options": [
      "Mermaid",
      "Woman",
      "None of the given",
      "Amphibious Vehicle"
    ],
    "correct": "Woman",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 2
  },
  {
    "id": 31,
    "question": "Static variable can be initialized more than once.",
    "options": [
      "True",
      "False"
    ],
    "correct": "False",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 3
  },
  {
    "id": 32,
    "question": "A generic class showing all the common attributes and a behavior of other classes represents a very important feature in oop called --------",
    "options": [
      "Inheritance",
      "Encapsulation",
      "Polymarphism",
      "Abstraction"
    ],
    "correct": "Inheritance",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 3
  },
  {
    "id": 33,
    "question": "We can get only one unique value which can be used by all the objects of that class by the use of,",
    "options": [
      "static variables",
      "dynamic variables",
      "instance variables",
      "data members"
    ],
    "correct": "static variables",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 1
  },
  {
    "id": 34,
    "question": "A member function having the same name as that of a class and a ~ sign with it is called,",
    "options": [
      "Constructor",
      "Getter",
      "Setter",
      "Destructor"
    ],
    "correct": "Destructor",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 5
  },
  {
    "id": 35,
    "question": "Using encapsulation we can achieve",
    "options": [
      "Information hiding",
      "Least interdependencies among modules",
      "Implementation independence",
      "All of given options"
    ],
    "correct": "Information hiding",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 1
  },
  {
    "id": 36,
    "question": "Inheritance is a way to",
    "options": [
      "make general classes into more specific classes.",
      "pass arguments to objects of classes.",
      "improve data hiding and encapsulation.",
      "providing class growth through natural selection."
    ],
    "correct": "make general classes into more specific classes.",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 5
  },
  {
    "id": 37,
    "question": "Static variable can be initialized more than once.",
    "options": [
      "True",
      "False"
    ],
    "correct": "False",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 5
  },
  {
    "id": 38,
    "question": "For classes with common behavior, you can save effort by placing the common behavior in a __________.",
    "options": [
      "Derived Class",
      "Base class",
      "Deprived Class",
      "Named class"
    ],
    "correct": "Base class",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 5
  },
  {
    "id": 39,
    "question": "Which of the following are an advantage of OOP?",
    "options": [
      "OOP makes it easy to re-use the code",
      "It provides an ability to create one user defined data type by extending the other",
      "It provides the facility of defining Abstract data types through which real world entities can be defined better.",
      "All of the given options"
    ],
    "correct": "All of the given options",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 1
  },
  {
    "id": 40,
    "question": "The >= operator can be overloaded.",
    "options": [
      "True",
      "False"
    ],
    "correct": "True",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 5
  },
  {
    "id": 41,
    "question": "A static member function cannot be declared.",
    "options": [
      "Static",
      "Implicit",
      "Explicit",
      "Virtual"
    ],
    "correct": "Virtual",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 3
  },
  {
    "id": 42,
    "question": "Static variables act like a global variable in the context or scope of the class.",
    "options": [
      "True",
      "False"
    ],
    "correct": "True",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 5
  },
  {
    "id": 43,
    "question": "The compiler won’t object if you overload the * operator to perform division.",
    "options": [
      "True",
      "False"
    ],
    "correct": "True",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 5
  },
  {
    "id": 44,
    "question": "We can use \"this\" pointer in the constructor in the body and even in the initialization list of any class if we are careful,",
    "options": [
      "TRUE",
      "False"
    ],
    "correct": "TRUE",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 3
  },
  {
    "id": 45,
    "question": "A C++ class is similar to --------------------",
    "options": [
      "Structure",
      "Header File",
      "Library File",
      "None of the given"
    ],
    "correct": "Structure",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 5
  },
  {
    "id": 46,
    "question": "Which operator can not be overloaded?",
    "options": [
      "The relation operator ( >= )",
      "Assignment operator ( = )",
      "Script operator ( [] )",
      "Conditional operator (? : )"
    ],
    "correct": "Conditional operator (? : )",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 5
  },
  {
    "id": 47,
    "question": "An overloaded operator always requires one less argument than its number of operands.",
    "options": [
      "True",
      "False"
    ],
    "correct": "True",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 5
  },
  {
    "id": 48,
    "question": "A generalization-specialization relation between classes are implemented using",
    "options": [
      "data hiding",
      "friend classes",
      "encapsulation",
      "inheritance"
    ],
    "correct": "inheritance",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 3
  },
  {
    "id": 49,
    "question": "In OOP a class is an example of _____",
    "options": [
      "Data Type",
      "Abstract Type",
      "User Defined Type",
      "None of the given"
    ],
    "correct": "User Defined Type",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 2
  },
  {
    "id": 50,
    "question": "A class can be identified from a statement by -------------",
    "options": [
      "Noun",
      "Pronoun",
      "Verb",
      "Adverb"
    ],
    "correct": "Noun",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 2
  },
  {
    "id": 51,
    "question": "The members of a class that can be accessed without creating the object of the class is called",
    "options": [
      "Private member",
      "Data Member",
      "Public Member",
      "Static"
    ],
    "correct": "Static",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 4
  },
  {
    "id": 52,
    "question": "Suppose there is an object of type Person, which of the following can be considered as one of its attributes",
    "options": [
      "Name",
      "Age",
      "Work()",
      "Both Name and Age"
    ],
    "correct": "Both Name and Age",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 5
  },
  {
    "id": 53,
    "question": "What a derived class can add?",
    "options": [
      "New data members",
      "New member functions and New friend functions",
      "New constructors and destructor",
      "All of given"
    ],
    "correct": "All of given",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 5
  },
  {
    "id": 54,
    "question": "________ is/are used to access information hidden within an object?",
    "options": [
      "Interface",
      "Private data members",
      "Private member functions",
      "Both public and private members"
    ],
    "correct": "Interface",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 4
  },
  {
    "id": 55,
    "question": "this pointers are not accessible for static member functions.",
    "options": [
      "True",
      "False"
    ],
    "correct": "True",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 4
  },
  {
    "id": 56,
    "question": "A static member function cannot be declared.",
    "options": [
      "Static",
      "Implicit",
      "Explicit",
      "Virtual"
    ],
    "correct": "Virtual",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 2
  },
  {
    "id": 57,
    "question": "C++ compiler does not allow to dynamically allocate memory for objects",
    "options": [
      "False",
      "True"
    ],
    "correct": "False",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 5
  },
  {
    "id": 58,
    "question": "Given the following class: class Base{ int Age=33; } How you can improve above class with respect to accessing the field Age?",
    "options": [
      "Define the variable Age as private",
      "Define the variable Age as protected",
      "Define the variable Age as private and create a get method that returns it and a set method that updates it",
      "Define the variable Age as protected and create a set method that returns it and a get method that updates it"
    ],
    "correct": "Define the variable Age as private and create a get method that returns it and a set method that updates it",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 1
  },
  {
    "id": 59,
    "question": "Friend class and friend function can be used as an alternate to each other",
    "options": [
      "True",
      "False"
    ],
    "correct": "True",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 2
  },
  {
    "id": 60,
    "question": "Which of the following operators always takes no argument if overloaded?",
    "options": [
      "/",
      "-",
      "+",
      "++"
    ],
    "correct": "++",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 2
  },
  {
    "id": 61,
    "question": "Suppose that the Test class does not have an overloaded assignment operator. What happens when an assignment a=b; is given for two Test objects a and b?",
    "options": [
      "The automatic assignment operator is used",
      "The copy constructor is used",
      "Compiler error",
      "Run-time error"
    ],
    "correct": "The automatic assignment operator is used",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 3
  },
  {
    "id": 62,
    "question": "Assume a class C with objects obj1, obj2, and obj3. For the statement obj3 = obj1 - obj2 to work correctly, the overloaded - operator must",
    "options": [
      "take two arguments.",
      "return a value",
      "create a named temporary object.",
      "take four arguments"
    ],
    "correct": "return a value",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 5
  },
  {
    "id": 63,
    "question": "Which operator can not be overloaded?",
    "options": [
      "The relation operator ( >= )",
      "Assignment operator ( = )",
      "Script operator ( [] )",
      "Conditional operator (? : )"
    ],
    "correct": "Conditional operator (? : )",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 5
  },
  {
    "id": 64,
    "question": "We achieve independence of internal implementation from its external interface through-----------",
    "options": [
      "Encapsulation",
      "Information Hiding",
      "Abstraction",
      "both encapsulation and information hiding"
    ],
    "correct": "Abstraction",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 2
  },
  {
    "id": 65,
    "question": "Which one of the following is not an object association?",
    "options": [
      "Simple Assocation",
      "Inheritance",
      "Aggregation",
      "Composition"
    ],
    "correct": "Inheritance",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 2
  },
  {
    "id": 66,
    "question": "Which construct is the source for the creation of an object?",
    "options": [
      "Destructor of the class",
      "New operator",
      "Delete operator",
      "Constructor of the class"
    ],
    "correct": "Constructor of the class",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 4
  },
  {
    "id": 67,
    "question": "this pointers are not accessible for static member functions.",
    "options": [
      "True",
      "False"
    ],
    "correct": "True",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 4
  },
  {
    "id": 68,
    "question": "When a variable is define as static in a class then all object of this class,",
    "options": [
      "Have different copies of this variable",
      "Have same copy of this variable",
      "Can not access this variable",
      "None of given"
    ],
    "correct": "Have same copy of this variable",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 5
  },
  {
    "id": 69,
    "question": "_______ remain in memory even when all objects of a class have been destroyed.",
    "options": [
      "Static variables",
      "Instance variable",
      "Primitive variables",
      "None of given"
    ],
    "correct": "Static variables",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 4
  },
  {
    "id": 70,
    "question": "Given the following class: class Base{ int Age=33; } How you can improve above class with respect to accessing the field Age?",
    "options": [
      "Define the variable Age as private",
      "Define the variable Age as protected",
      "Define the variable Age as private and create a get method that returns it and a set method that updates it",
      "Define the variable Age as protected and create a set method that returns it and a get method that updates it"
    ],
    "correct": "Define the variable Age as private and create a get method that returns it and a set method that updates it",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 5
  },
  {
    "id": 71,
    "question": "The life of sub object is not dependant on the life of master class in __________.",
    "options": [
      "Composition",
      "Aggregation",
      "Separation",
      "None of the given"
    ],
    "correct": "Aggregation",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 3
  },
  {
    "id": 72,
    "question": "Which one is not keyword in C++?",
    "options": [
      "operator",
      "B_op",
      "const",
      "None of given"
    ],
    "correct": "B_op",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 3
  },
  {
    "id": 73,
    "question": "The >= operator can be overloaded.",
    "options": [
      "True",
      "False"
    ],
    "correct": "True",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 5
  },
  {
    "id": 74,
    "question": "Identify which of the following overloaded operator function’s declaration is appropriate for the given call? Rational_number_1 + 2.325 Where Rational_number_1 is an object of user defined class Rational_number.",
    "options": [
      "Rational_number operator+( Rational_number & obj);",
      "Rational_number operator+(double& obj);",
      "Rational_number operator+(Rational_number &obj, double& num);",
      "operator+(double& obj);"
    ],
    "correct": "Rational_number operator+(double& obj);",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 1
  },
  {
    "id": 75,
    "question": "A template provides a convenient way to make a family of",
    "options": [
      "variables and data members",
      "functions and classes",
      "classes and exceptions",
      "programs and algorithms"
    ],
    "correct": "functions and classes",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 5
  },
  {
    "id": 76,
    "question": "Which one of the following terms must relate to polymorphism?",
    "options": [
      "Static allocation",
      "Static typing",
      "Dynamic binding",
      "Dynamic allocation"
    ],
    "correct": "Dynamic binding",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 1
  },
  {
    "id": 77,
    "question": "What is true about function templates?",
    "options": [
      "The compiler generates only one copy of the function template",
      "The compiler generates a copy of function respective to each type of data",
      "The compiler can only generate copy for the int type data",
      "None of the given."
    ],
    "correct": "The compiler generates a copy of function respective to each type of data",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 2
  },
  {
    "id": 78,
    "question": "Which of the following is the best approach if it is required to have more than one functions having exactly same functionality and implemented on different data types?",
    "options": [
      "Templates",
      "Overloading",
      "Data hiding",
      "Encapsulation"
    ],
    "correct": "Templates",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 2
  },
  {
    "id": 79,
    "question": "template <> class Vector<char*> { } This is an example of partial specialization.",
    "options": [
      "True",
      "False"
    ],
    "correct": "True",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 5
  },
  {
    "id": 80,
    "question": "Classes like TwoDimensionalShape and ThreeDimensionalShape would normally be concrete, while classes like Sphere and Cube would normally be abstract.",
    "options": [
      "True",
      "False"
    ],
    "correct": "False",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 4
  },
  {
    "id": 81,
    "question": "A non-virtual member function is defined in a base class and overridden in a derived class; if that function is called through a base-class pointer to a derived class object, the derived-class version is used.",
    "options": [
      "True",
      "False"
    ],
    "correct": "False",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 4
  },
  {
    "id": 82,
    "question": "Assume a class Derv that is privately derived from class Base. An object of class Derv located in main() can access",
    "options": [
      "public members of Derv.",
      "protected members of Derv.",
      "private members of Derv.",
      "protected members of Base."
    ],
    "correct": "public members of Derv.",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 5
  },
  {
    "id": 83,
    "question": "In order to define a class template, the first line of definition must be:",
    "options": [
      "template <typename T>",
      "typename <template T>",
      "Template Class <ClassName>",
      "Class <Template T>"
    ],
    "correct": "template <typename T>",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 2
  },
  {
    "id": 84,
    "question": "If there is a pointer p to objects of a base class, and it contains the address of an object of a derived class, and both classes contain a nonvirtual member function, ding(), then the statement p->ding(); will cause the version of ding() in the _____ class to be executed.",
    "options": [
      "Base",
      "Derived",
      "Abstract",
      "virtual"
    ],
    "correct": "Base",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 5
  },
  {
    "id": 85,
    "question": "When the base class and the derived class have a member function with the same name, you must be more specific which function you want to call (using ___________).",
    "options": [
      "scope resolution operator",
      "dot operator",
      "null operator",
      "Operator overloading"
    ],
    "correct": "scope resolution operator",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 4
  },
  {
    "id": 86,
    "question": "Non Template Friend functions of a class are friends of ________instance/s of that class.",
    "options": [
      "All",
      "One specific",
      "All instances of one date type",
      "None of the given options"
    ],
    "correct": "All",
    "explanation": "N/A",
    "difficulty": "Medium",
    "importance": 3
  },
  {
    "id": 87,
    "question": "The find() algorithm",
    "options": [
      "finds matching sequences of elements in two containers.",
      "finds a container that matches a specified container.",
      "takes iterators as its first two arguments.",
      "takes container elements as its first two arguments."
    ],
    "correct": "takes iterators as its first two arguments.",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 4
  },
  {
    "id": 88,
    "question": "If you define a vector v with the default constructor, and define another vector w with a one-argument constructor to a size of 11, and insert 3 elements into each of these vectors with push_back(), then the size() member function will return ______ for v and _____ for w.",
    "options": [
      "11 for v and 3 for w.",
      "0 for v and 0 for w.",
      "0 for v and 3 for w.",
      "3 for v and 11 for w."
    ],
    "correct": "3 for v and 11 for w.",
    "explanation": "N/A",
    "difficulty": "Easy",
    "importance": 1
  },
  {
    "id": 89,
    "question": "Which of the following may not be an integral part of an object?",
    "options": [
      "State",
      "Behavior",
      "Protected data members",
      "All of given"
    ],
    "correct": "Protected data members",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 5
  },
  {
    "id": 90,
    "question": "Which is not the Advantage of inheritance?",
    "options": [
      "providing class growth through natural selection.",
      "facilitating class libraries.",
      "avoiding the rewriting of code.",
      "providing a useful conceptual framework."
    ],
    "correct": "avoiding the rewriting of code.",
    "explanation": "N/A",
    "difficulty": "Hard",
    "importance": 1
  }
]